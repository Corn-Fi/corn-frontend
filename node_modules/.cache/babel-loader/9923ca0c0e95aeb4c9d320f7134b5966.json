{"ast":null,"code":"var _jsxFileName = \"/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/pages/pools/index.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\"; //static confg\n\nimport { addresses } from \"../../config/addresses\";\nimport { pools } from \"../../config/pools\";\nimport { MasterChefABI, ERC20Abi } from \"../../config/abis\";\nimport { writeContract } from \"../../utils/nft\";\nimport { fetchUserPoolData, mapPendingToOriginalData, getPoolBalance } from \"../../utils/fetchUserData\"; //Components\n\nimport { Page } from \"../../components/Page\";\nimport { Container, Card, Button } from \"react-bootstrap\";\nimport PoolCard from \"./components/PoolCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PoolGrid = styled(Container)`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-template-rows: auto;\n    justify-items: center;\n    align-content: start;\n    column-gap: 2px;\n    row-gap: 20px;\n    margin-bottom: 25px;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        grid-template-columns: auto;\n        grid-template-rows: auto;\n      }\n  \n`;\n_c = PoolGrid;\nconst HeadingContainer = styled(Container)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    margin-top: 15px;\n`;\n_c2 = HeadingContainer;\nconst HeadingBackground = styled(Card)`\n    height: auto;\n    width: 100%;\n    padding: 20px;\n    background-color: #1D1E20;\n    box-shadow: 0px 3px 15px rgba(0,0,0,0.2);\n`;\n_c3 = HeadingBackground;\nconst BigHeading = styled.h1`\n    font-size: 280%;\n    font-weight: 800;\n    color:  #fbdb37;\n    \n`;\n_c4 = BigHeading;\nconst LittleHeading = styled.h2`\n    font-size: 200%;\n    font-weight: 600;\n    color: #fbfbfb;\n    \n`;\n_c5 = LittleHeading;\n\nconst Pools = () => {\n  _s();\n\n  const {\n    active,\n    account,\n    library,\n    connector\n  } = useWeb3React();\n  const [poolData, setPoolData] = useState(pools); //imported above\n\n  const [masterChefContract, setMasterChefContract] = useState();\n  const [poolBalance, setPoolBalance] = useState('0');\n  useEffect(() => {\n    if (active) {\n      const master = writeContract(active, library.getSigner(), account, addresses.masterChef, MasterChefABI).then(val => {\n        setMasterChefContract(val);\n        console.log(val);\n      });\n    } else {\n      console.log(\"no masterchef\");\n      const noData = setMasterChefContract(null);\n    }\n  }, [active]);\n  useEffect(async () => {\n    try {\n      if (library && account) {\n        const farmData = await fetchUserPoolData(masterChefContract, library, account, 4);\n        const userFarmData = await mapPendingToOriginalData(farmData, pools, masterChefContract, 4);\n        setPoolData(userFarmData);\n      } else {\n        console.log(\"stillbroke no pooldata\");\n        setPoolData(pools);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [masterChefContract, account, library]);\n  useEffect(async poolData => {\n    try {\n      if (poolData.pendingCob !== undefined) {\n        const poolbal = await getPoolBalance(poolData, active, library.getSigner(), account, ERC20Abi, masterChefContract, 4);\n        setPoolBalance(poolbal);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [poolData]); //if we do have pooldata then go ahead and populate a card for each pool\n\n  if (masterChefContract !== null && active) {\n    const mapPoolData = poolData.map((pool, index) => /*#__PURE__*/_jsxDEV(PoolCard, {\n      poolBalance: poolBalance[index],\n      pool: pool\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HeadingContainer, {\n        children: /*#__PURE__*/_jsxDEV(HeadingBackground, {\n          children: [/*#__PURE__*/_jsxDEV(BigHeading, {\n            children: \"Staking Pools\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LittleHeading, {\n            children: \"Stake Assets to Earn COB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PoolGrid, {\n        children: mapPoolData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } //if we dont have pool data then return static dummy\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(HeadingContainer, {\n        children: /*#__PURE__*/_jsxDEV(HeadingBackground, {\n          children: [/*#__PURE__*/_jsxDEV(BigHeading, {\n            children: \"Staking Pools\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LittleHeading, {\n            children: \"Stake Assets to Earn COB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PoolGrid, {\n        children: [/*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Pools, \"iYjBtBufQIL4mIgonXiA/pS7M4Q=\", false, function () {\n  return [useWeb3React];\n});\n\n_c6 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"PoolGrid\");\n$RefreshReg$(_c2, \"HeadingContainer\");\n$RefreshReg$(_c3, \"HeadingBackground\");\n$RefreshReg$(_c4, \"BigHeading\");\n$RefreshReg$(_c5, \"LittleHeading\");\n$RefreshReg$(_c6, \"Pools\");","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/pages/pools/index.js"],"names":["styled","axios","ethers","React","useEffect","useState","useWeb3React","addresses","pools","MasterChefABI","ERC20Abi","writeContract","fetchUserPoolData","mapPendingToOriginalData","getPoolBalance","Page","Container","Card","Button","PoolCard","PoolGrid","HeadingContainer","HeadingBackground","BigHeading","h1","LittleHeading","h2","Pools","active","account","library","connector","poolData","setPoolData","masterChefContract","setMasterChefContract","poolBalance","setPoolBalance","master","getSigner","masterChef","then","val","console","log","noData","farmData","userFarmData","err","pendingCob","undefined","poolbal","mapPoolData","map","pool","index"],"mappings":"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","sourcesContent":["\nimport styled from \"styled-components\";\nimport axios from \"axios\"\nimport {ethers} from \"ethers\";\nimport React, {useEffect, useState} from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n//static confg\nimport { addresses } from \"../../config/addresses\";\nimport {pools} from \"../../config/pools\";\nimport {MasterChefABI, ERC20Abi} from \"../../config/abis\";\nimport {writeContract} from \"../../utils/nft\";\nimport {fetchUserPoolData, mapPendingToOriginalData, getPoolBalance} from \"../../utils/fetchUserData\";\n//Components\nimport {Page} from \"../../components/Page\"\nimport {Container, Card, Button} from \"react-bootstrap\";\n\nimport PoolCard from \"./components/PoolCard\"\n\n\nconst PoolGrid = styled(Container)`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-template-rows: auto;\n    justify-items: center;\n    align-content: start;\n    column-gap: 2px;\n    row-gap: 20px;\n    margin-bottom: 25px;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        grid-template-columns: auto;\n        grid-template-rows: auto;\n      }\n  \n`\n\nconst HeadingContainer = styled(Container)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    margin-top: 15px;\n`\n\nconst HeadingBackground = styled(Card)`\n    height: auto;\n    width: 100%;\n    padding: 20px;\n    background-color: #1D1E20;\n    box-shadow: 0px 3px 15px rgba(0,0,0,0.2);\n`\n\nconst BigHeading = styled.h1`\n    font-size: 280%;\n    font-weight: 800;\n    color:  #fbdb37;\n    \n`\nconst LittleHeading = styled.h2`\n    font-size: 200%;\n    font-weight: 600;\n    color: #fbfbfb;\n    \n`\n\n\nconst Pools = () => {\n   \n    const {active, account, library, connector} = useWeb3React();\n    const [poolData, setPoolData] = useState(pools); //imported above\n    const [masterChefContract, setMasterChefContract] = useState()\n    const [poolBalance, setPoolBalance] = useState('0')\n    \n    \n    useEffect( () => {\n        if (active) {\n          const master = writeContract(\n              active, \n              library.getSigner(), \n              account,\n              addresses.masterChef,\n              MasterChefABI,\n              ).then(val => {\n                setMasterChefContract(val)\n                console.log(val)\n              })\n        } else {\n            console.log(\"no masterchef\")\n          const noData = setMasterChefContract(null)\n        }\n        \n        \n      }, [active])\n\n    useEffect( async () => {\n        try {\n            if (library && account) {\n\n                const farmData = await fetchUserPoolData(masterChefContract, library, account, 4)\n                const userFarmData = await mapPendingToOriginalData(farmData, pools, masterChefContract, 4)\n\n                setPoolData(userFarmData)\n            } else {\n                console.log(\"stillbroke no pooldata\")\n                setPoolData(pools)\n            }\n        } catch (err) {console.log(err)}\n\n    \n    }, [masterChefContract, account, library])\n\n    useEffect( async (poolData) => {\n\n        try {\n            if (poolData.pendingCob !== undefined) {\n                const poolbal = await getPoolBalance(poolData, active, library.getSigner(), account, ERC20Abi, masterChefContract, 4)\n                setPoolBalance(poolbal)           \n            }\n\n        } catch (err) {\n            console.log(err)\n        }\n    }, [poolData])\n\n    //if we do have pooldata then go ahead and populate a card for each pool\n    if (masterChefContract !== null && active) {\n        const mapPoolData =  poolData.map((pool, index) => (\n\n            <PoolCard key={index} poolBalance={poolBalance[index]} pool={pool}/>\n            \n        ));\n\n        return (\n            <>\n            <HeadingContainer>\n                <HeadingBackground>\n                    <BigHeading>Staking Pools</BigHeading>\n                    <LittleHeading>Stake Assets to Earn COB</LittleHeading>\n                </HeadingBackground>\n            </HeadingContainer>\n            <PoolGrid>\n                {mapPoolData}\n            </PoolGrid>\n            \n            \n    \n            </>\n        )\n    }\n   \n    //if we dont have pool data then return static dummy\n    return (\n        <>\n        <Page>\n\n            <HeadingContainer>\n                <HeadingBackground>\n                    <BigHeading>Staking Pools</BigHeading>\n                    <LittleHeading>Stake Assets to Earn COB</LittleHeading>\n                </HeadingBackground>\n            </HeadingContainer>\n\n            <PoolGrid>\n\n                <PoolCard/>\n                <PoolCard/>\n                <PoolCard/>\n                \n            \n            </PoolGrid>\n            \n\n        </Page>\n\n        </>\n    )\n}\n\nexport default Pools"]},"metadata":{},"sourceType":"module"}