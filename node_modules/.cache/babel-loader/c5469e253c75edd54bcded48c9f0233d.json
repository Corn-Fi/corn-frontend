{"ast":null,"code":"import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { writeContract } from \"./nft\";\n\nconst getPoolInfo = async (masterchef, poolLength) => {\n  const pLength = poolLength;\n  const poolInfo = [];\n\n  for (let index = 0; index < pLength; index++) {\n    const data = await masterchef.poolInfo(index);\n    poolInfo.push(data);\n  }\n\n  return poolInfo;\n}; // works\n\n\nexport const fetchUserPoolData = async (_masterChef, _library, _account, poolLength) => {\n  const pLength = poolLength;\n  const accountAddress = _account;\n  const poolInfo = await getPoolInfo(_masterChef, poolLength);\n  const userPoolDataPromises = [];\n\n  for (let pid = 0; pid < pLength; pid++) {\n    const poolData = _masterChef.pendingCob(pid, accountAddress);\n\n    userPoolDataPromises.push(poolData);\n  }\n\n  ;\n  const dataPack = Promise.all(userPoolDataPromises).then(values => {\n    const data = values.map((value, index) => {\n      const pending = ethers.utils.formatUnits(value, \"ether\");\n      const pool = poolInfo[index];\n      const lpToken = pool.lpToken;\n      const allocationPoints = ethers.utils.formatUnits(pool.allocPoint, \"wei\");\n      const accCobPerShare = ethers.utils.formatUnits(pool.accCobPerShare, \"ether\");\n      const depositFee = pool.depositFeeBP;\n      return {\n        pendingReward: pending,\n        poolInformation: {\n          depositTokenAddress: lpToken,\n          allocation: allocationPoints,\n          rewardPerShare: accCobPerShare,\n          fee: depositFee\n        }\n      };\n    });\n    return data;\n  });\n  return dataPack;\n};\nexport const getPoolLength = async _masterchef => {\n  _masterchef.poolLength().then(res => {\n    return res;\n  });\n};\nexport const mapPendingToOriginalData = (newData, oldData, _masterchef, poolLength) => {\n  const staticPoolLength = oldData.length;\n\n  if (poolLength == staticPoolLength) {\n    const recycledData = newData.map((value, index) => {\n      const pending = value.pendingReward;\n      return {\n        pendingCob: pending,\n        ...oldData[index]\n      };\n    });\n    return recycledData;\n  } else {\n    console.log(`Devie needs to update static pool folder.  Your fetched pool length is ${poolLength} but your static pool length is ${staticPoolLength}`);\n    return oldData;\n  }\n};\nexport const getPoolBalance = async (poolData, _active, _signer, _account, _address, _abi, _masterchef, plength) => {\n  const balances = [];\n  poolData.map(async pool => {\n    const address = pool.tokenStakeAddress;\n    const erc20 = await writeContract(_active, _signer, _account, address, _abi);\n    const masterChefAddress = _masterchef.address;\n    const balance = await erc20.balanceOf(masterChefAddress);\n    balances.push(balance);\n  });\n  return balances;\n};","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/utils/fetchUserData.js"],"names":["React","ethers","writeContract","getPoolInfo","masterchef","poolLength","pLength","poolInfo","index","data","push","fetchUserPoolData","_masterChef","_library","_account","accountAddress","userPoolDataPromises","pid","poolData","pendingCob","dataPack","Promise","all","then","values","map","value","pending","utils","formatUnits","pool","lpToken","allocationPoints","allocPoint","accCobPerShare","depositFee","depositFeeBP","pendingReward","poolInformation","depositTokenAddress","allocation","rewardPerShare","fee","getPoolLength","_masterchef","res","mapPendingToOriginalData","newData","oldData","staticPoolLength","length","recycledData","console","log","getPoolBalance","_active","_signer","_address","_abi","plength","balances","address","tokenStakeAddress","erc20","masterChefAddress","balance","balanceOf"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {ethers} from \"ethers\";\nimport {writeContract} from \"./nft\"\n\nconst getPoolInfo = async (masterchef, poolLength) => {\n    const pLength = poolLength\n\n    const poolInfo = [];\n    for (let index = 0; index < pLength; index++) {\n        const data = await masterchef.poolInfo(index);\n        poolInfo.push(data);\n        \n    }\n\n    return poolInfo;\n} // works\n\nexport const fetchUserPoolData = async (_masterChef, _library, _account, poolLength) => {\n\n    const pLength = poolLength\n    const accountAddress = _account;\n    const poolInfo = await getPoolInfo(_masterChef, poolLength);\n\n\n    const userPoolDataPromises = [];\n    for (let pid = 0; pid < pLength; pid++) {\n        const poolData = _masterChef.pendingCob(pid, accountAddress);\n        userPoolDataPromises.push(poolData);\n    };\n\n    const dataPack = Promise.all(userPoolDataPromises)\n    .then(values => {\n        const data = values.map((value, index) => {\n            const pending = ethers.utils.formatUnits(value, \"ether\");\n\n            const pool = poolInfo[index];\n            const lpToken = pool.lpToken;\n            const allocationPoints = ethers.utils.formatUnits(pool.allocPoint, \"wei\");\n            const accCobPerShare = ethers.utils.formatUnits(pool.accCobPerShare, \"ether\");\n            const depositFee = pool.depositFeeBP;\n            \n\n            return {\n                pendingReward: pending, \n                poolInformation: {\n                    depositTokenAddress: lpToken,\n                    allocation: allocationPoints,\n                    rewardPerShare: accCobPerShare,\n                    fee: depositFee\n                }};\n        })\n        return data;\n    })\n    return dataPack\n}\n\nexport const getPoolLength = async (_masterchef) => {\n    _masterchef.poolLength().then( res => {\n        return res\n    }); \n}\n\nexport const mapPendingToOriginalData = (newData, oldData, _masterchef, poolLength) => {\n    const staticPoolLength = oldData.length;\n    if (poolLength == staticPoolLength) {\n        const recycledData = newData.map((value, index) => {\n            const pending = value.pendingReward;\n            return {\n                pendingCob: pending,\n                ...oldData[index]\n            };\n        });\n\n        return recycledData;\n\n    } else {\n\n        console.log(`Devie needs to update static pool folder.  Your fetched pool length is ${poolLength} but your static pool length is ${staticPoolLength}`);\n        return oldData;\n\n    }\n\n\n}\n\nexport const getPoolBalance = async (poolData, _active, _signer, _account, _address, _abi, _masterchef, plength) => {\n\n\n    const balances = []\n    poolData.map(async (pool) => {\n        const address = pool.tokenStakeAddress\n        const erc20 = await writeContract(_active, _signer, _account, address, _abi)\n        const masterChefAddress = _masterchef.address\n        const balance = await erc20.balanceOf(masterChefAddress)\n        balances.push(balance)\n    });\n\n\n    return balances\n}"]},"metadata":{},"sourceType":"module"}