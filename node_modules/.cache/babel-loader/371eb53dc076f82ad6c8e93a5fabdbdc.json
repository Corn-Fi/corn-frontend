{"ast":null,"code":"import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { addresses } from \"../config/addresses\";\nimport { nftABI } from \"../config/abis\";\nimport { nftURI } from \"../config/uri\";\nimport axios from \"axios\"; //ABIs\n\nimport { ERC20Abi } from \"../config/abis\";\nexport const writeContract = async (active, _provider, _account, _address, _abi) => {\n  if (active) {\n    try {\n      const ctr = new ethers.Contract(_address, _abi, _provider);\n\n      if (ctr.address) {\n        return ctr;\n      } else {\n        console.log(\"Contract failed to load, refresh signer\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};\nexport const userMint = async (_nftContract, recipient, _tokenURI) => {\n  const ctr = _nftContract;\n\n  try {\n    const mint = await ctr.mintNFT(recipient, _tokenURI);\n    return mint;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getNFTData = async () => {\n  const data = axios.get(nftURI).then(value => {\n    return value;\n  });\n}; //staking stuff\n\n\nexport const fetchPoolAllowance = pools => {\n  const calls = pools.map(pool => {\n    const token = pool.tokenStakeAddress;\n  });\n};\nexport const userStake = async (_masterchef, pid, amount) => {\n  const ctr = _masterchef;\n\n  try {\n    const strAmount = amount.toString();\n    const strPid = pid.toString();\n    await ctr.deposit(strPid, strAmount);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const userClaim = async (_masterchef, pid) => {\n  const ctr = _masterchef;\n  const amount = 0;\n\n  try {\n    const strAmount = amount.toString();\n    const strPid = pid.toString();\n    await ctr.deposit(strPid, strAmount);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport function StringToFixedDecimal(num, fixed) {\n  try {\n    var re = new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (fixed || -1) + '})?');\n    return num.toString().match(re)[0];\n  } catch (err) {\n    console.log(err);\n    return \"0\";\n  }\n}\n_c = StringToFixedDecimal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StringToFixedDecimal\");","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/utils/nft.js"],"names":["ethers","React","useEffect","useState","useWeb3React","addresses","nftABI","nftURI","axios","ERC20Abi","writeContract","active","_provider","_account","_address","_abi","ctr","Contract","address","console","log","err","userMint","_nftContract","recipient","_tokenURI","mint","mintNFT","getNFTData","data","get","then","value","fetchPoolAllowance","pools","calls","map","pool","token","tokenStakeAddress","userStake","_masterchef","pid","amount","strAmount","toString","strPid","deposit","userClaim","StringToFixedDecimal","num","fixed","re","RegExp","match"],"mappings":"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","sourcesContent":["import {ethers} from \"ethers\";\nimport React, {useEffect, useState} from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { addresses } from \"../config/addresses\";\nimport {nftABI} from \"../config/abis\";\nimport {nftURI} from \"../config/uri\";\nimport axios from \"axios\"\n\n//ABIs\nimport {ERC20Abi} from \"../config/abis\"\n\n\nexport const writeContract = async (active, _provider, _account, _address, _abi) => {\n    if (active) {\n        try {\n            const ctr = new ethers.Contract(_address, _abi, _provider)\n            if (ctr.address) {\n                return ctr\n            } else {\n                console.log(\"Contract failed to load, refresh signer\")\n            }\n        } catch (err) {console.log(err)}\n    }\n}\n\n\n\nexport const userMint = async (_nftContract, recipient, _tokenURI) => {\n    const ctr = _nftContract;\n    try {\n        const mint = await ctr.mintNFT(recipient, _tokenURI)\n        return mint\n    } catch (err) {console.log(err)}\n}\n\n\nconst getNFTData = async () => {\n    const data = axios.get(nftURI)\n    .then(value => {\n        return value\n    })\n}\n\n\n//staking stuff\nexport const fetchPoolAllowance = (pools) => {\n    const calls = pools.map( (pool) => {\n        const token = pool.tokenStakeAddress;\n        \n    })\n}\n\nexport const userStake = async (_masterchef, pid, amount) => {\n    const ctr = _masterchef;\n    try {\n        const strAmount = amount.toString();\n        const strPid = pid.toString();\n\n        await ctr.deposit(strPid, strAmount);\n    } catch (err) {console.log(err)}\n\n}\n\nexport const userClaim = async (_masterchef, pid) => {\n    const ctr = _masterchef;\n    const amount = 0;\n    try {\n        const strAmount = amount.toString();\n        const strPid = pid.toString();\n\n        await ctr.deposit(strPid, strAmount)\n    } catch (err) {console.log(err)}\n}\n\nexport function StringToFixedDecimal(num, fixed) {\n    try {\n      var re = new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (fixed || -1) + '})?');\n      return num.toString().match(re)[0];\n    } catch (err) {\n      console.log(err)\n      return \"0\"\n    }\n\n  }"]},"metadata":{},"sourceType":"module"}