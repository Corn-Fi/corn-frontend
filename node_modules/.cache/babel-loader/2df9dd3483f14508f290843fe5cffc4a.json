{"ast":null,"code":"import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { addresses } from \"../config/addresses\";\nimport { nftABI } from \"../config/abis\";\nimport { nftURI } from \"../config/uri\";\nimport axios from \"axios\"; //ABIs\n\nimport { ERC20Abi } from \"../config/abis\";\nexport const writeContract = async (active, _signer, _account, _address, _abi) => {\n  if (active) {\n    try {\n      const ctr = new ethers.Contract(_address, _abi, _signer);\n\n      if (ctr.address) {\n        return ctr;\n      } else {\n        console.log(\"Contract failed to load, refresh signer\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};\nexport const userMint = async (_nftContract, recipient, _tokenURI) => {\n  const ctr = _nftContract;\n\n  try {\n    const mint = await ctr.mintNFT(recipient, _tokenURI);\n    return mint;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst getNFTData = async () => {\n  const data = axios.get(nftURI).then(value => {\n    return value;\n  });\n}; //staking stuff\n\n\nexport const fetchPoolAllowance = async (pools, _signer, account, masterchef) => {\n  const calls = pools.map(async pool => {\n    const token = pool.tokenStakeAddress;\n    const ctr = new ethers.Contract(token, ERC20Abi, _signer);\n    const allowance = await ctr.allowance(account, masterchef.address);\n    const formattedAllowance = ethers.utils.formatUnits(allowance, \"ether\");\n\n    if (formattedAllowance !== \"0.0\") {\n      return {\n        approved: true\n      };\n    } else {\n      return {\n        approved: false\n      };\n    }\n  });\n  const callResults = await Promise.all(calls);\n  console.log(`These are your call results from allowance ${callResults}`);\n  console.log(callResults);\n  return callResults;\n};\nexport const setPoolAllowance = async (tokenAddress, masterchef, _signer) => {\n  const ctr = new ethers.Contract(tokenAddress, ERC20Abi, _signer);\n\n  try {\n    const approve = await ctr.approve(masterchef.address, ethers.constants.MaxUint256);\n    return approve;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const getTokenStakeBalance = async (tokenAddress, _signer, _account) => {\n  const ctr = new ethers.Contract(tokenAddress, ERC20Abi, _signer);\n\n  try {\n    const balance = await ctr.balanceOf(account);\n    return balance;\n  } catch (err) {\n    console.log(err);\n  }\n}; // const balances = poolData.map( async (value, index) => {\n//     const address = value.tokenStakeAddress\n//     const erc20 =  await writeContract(_active, signer, account, address, abi)\n//     const masterChefAddress = \"0xC71EbC899BCC111F39B2715B5d2D397E671B5bd2\"\n//     const balance =  await erc20.balanceOf(masterChefAddress)\n//     const stringbal = ethers.utils.formatUnits(balance, \"ether\")\n//     return stringbal\n// });\n// const results = await Promise.all(balances)\n// return results\n\nexport const userStake = async (_masterchef, pid, amount) => {\n  const ctr = _masterchef;\n\n  try {\n    const strAmount = amount.toString();\n    const strPid = pid.toString();\n    await ctr.deposit(strPid, strAmount);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const userClaim = async (_masterchef, pid) => {\n  const ctr = _masterchef;\n  const amount = 0;\n\n  try {\n    const strAmount = amount.toString();\n    const strPid = pid.toString();\n    await ctr.deposit(strPid, strAmount);\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const toFixed = (num, fixed) => {\n  try {\n    var re = new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (fixed || -1) + '})?');\n    return num.toString().match(re)[0];\n  } catch (err) {\n    console.log(err);\n    return \"0\";\n  }\n};","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/utils/nft.js"],"names":["ethers","React","useEffect","useState","useWeb3React","addresses","nftABI","nftURI","axios","ERC20Abi","writeContract","active","_signer","_account","_address","_abi","ctr","Contract","address","console","log","err","userMint","_nftContract","recipient","_tokenURI","mint","mintNFT","getNFTData","data","get","then","value","fetchPoolAllowance","pools","account","masterchef","calls","map","pool","token","tokenStakeAddress","allowance","formattedAllowance","utils","formatUnits","approved","callResults","Promise","all","setPoolAllowance","tokenAddress","approve","constants","MaxUint256","getTokenStakeBalance","balance","balanceOf","userStake","_masterchef","pid","amount","strAmount","toString","strPid","deposit","userClaim","toFixed","num","fixed","re","RegExp","match"],"mappings":"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","sourcesContent":["import {ethers} from \"ethers\";\nimport React, {useEffect, useState} from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { addresses } from \"../config/addresses\";\nimport {nftABI} from \"../config/abis\";\nimport {nftURI} from \"../config/uri\";\nimport axios from \"axios\"\n\n//ABIs\nimport {ERC20Abi} from \"../config/abis\"\n\n\nexport const writeContract = async (active, _signer, _account, _address, _abi) => {\n    if (active) {\n        try {\n            const ctr = new ethers.Contract(_address, _abi, _signer)\n            if (ctr.address) {\n                return ctr\n            } else {\n                console.log(\"Contract failed to load, refresh signer\")\n            }\n        } catch (err) {console.log(err)}\n    }\n}\n\n\n\nexport const userMint = async (_nftContract, recipient, _tokenURI) => {\n    const ctr = _nftContract;\n    try {\n        const mint = await ctr.mintNFT(recipient, _tokenURI)\n        return mint\n    } catch (err) {console.log(err)}\n}\n\n\nconst getNFTData = async () => {\n    const data = axios.get(nftURI)\n    .then(value => {\n        return value\n    })\n}\n\n\n//staking stuff\nexport const fetchPoolAllowance = async (pools, _signer, account, masterchef) => {\n\n    const calls = pools.map( async (pool) => {\n        const token = pool.tokenStakeAddress;\n        const ctr = new ethers.Contract(token, ERC20Abi, _signer)\n        const allowance = await ctr.allowance(account, masterchef.address)\n        const formattedAllowance = ethers.utils.formatUnits(allowance, \"ether\");\n\n        if (formattedAllowance !== \"0.0\") {\n            return {approved: true}\n        } else {\n            return {approved: false}\n        }\n    })\n\n    const callResults = await Promise.all(calls)\n    console.log(`These are your call results from allowance ${callResults}`)\n    console.log(callResults)\n    return callResults\n\n}\n\nexport const setPoolAllowance = async (tokenAddress, masterchef, _signer) => {\n    const ctr = new ethers.Contract(tokenAddress, ERC20Abi, _signer)\n    try {\n        const approve = await ctr.approve(masterchef.address, ethers.constants.MaxUint256) \n        return approve\n    } catch (err) {console.log(err)}\n}\n\n\nexport const getTokenStakeBalance = async (tokenAddress, _signer, _account) => {\n    const ctr = new ethers.Contract(tokenAddress, ERC20Abi, _signer)\n    try {\n        const balance = await ctr.balanceOf(account)\n        return balance\n    } catch (err) {console.log(err)}\n}\n\n// const balances = poolData.map( async (value, index) => {\n//     const address = value.tokenStakeAddress\n//     const erc20 =  await writeContract(_active, signer, account, address, abi)\n//     const masterChefAddress = \"0xC71EbC899BCC111F39B2715B5d2D397E671B5bd2\"\n//     const balance =  await erc20.balanceOf(masterChefAddress)\n//     const stringbal = ethers.utils.formatUnits(balance, \"ether\")\n//     return stringbal\n// });\n\n// const results = await Promise.all(balances)\n// return results\n\n\nexport const userStake = async (_masterchef, pid, amount) => {\n    const ctr = _masterchef;\n    try {\n        const strAmount = amount.toString();\n        const strPid = pid.toString();\n\n        await ctr.deposit(strPid, strAmount);\n    } catch (err) {console.log(err)}\n\n}\n\nexport const userClaim = async (_masterchef, pid) => {\n    const ctr = _masterchef;\n    const amount = 0;\n    try {\n        const strAmount = amount.toString();\n        const strPid = pid.toString();\n\n        await ctr.deposit(strPid, strAmount)\n    } catch (err) {console.log(err)}\n}\n\nexport const toFixed = (num, fixed) => {\n    try {\n      var re = new RegExp('^-?\\\\d+(?:\\.\\\\d{0,' + (fixed || -1) + '})?');\n      return num.toString().match(re)[0];\n    } catch (err) {\n      console.log(err)\n      return \"0\"\n    }\n\n  }"]},"metadata":{},"sourceType":"module"}