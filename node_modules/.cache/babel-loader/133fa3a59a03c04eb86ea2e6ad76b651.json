{"ast":null,"code":"var _jsxFileName = \"/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/pages/pools/index.js\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\"; //static confg\n\nimport { addresses } from \"../../config/addresses\";\nimport { pools } from \"../../config/pools\";\nimport { MasterChefABI, ERC20Abi } from \"../../config/abis\";\nimport { writeContract, fetchPoolAllowance, getTokenStakeBalance, fetchTokenStakeBalance } from \"../../utils/nft\";\nimport { fetchUserPoolData, mapPendingToOriginalData, getPoolBalance } from \"../../utils/fetchUserData\"; //Components\n\nimport { Page } from \"../../components/Page\";\nimport { Container, Card, Button } from \"react-bootstrap\";\nimport PoolCard from \"./components/PoolCard\"; //hooks\n\nimport { useRefresh } from \"../../utils/useRefresh\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PoolGrid = styled(Container)`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-template-rows: auto;\n    justify-items: center;\n    align-content: start;\n    column-gap: 2px;\n    row-gap: 20px;\n    margin-bottom: 25px;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        grid-template-columns: auto;\n        grid-template-rows: auto;\n      }\n  \n`;\n_c = PoolGrid;\nconst HeadingContainer = styled(Container)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    margin-top: 15px;\n`;\n_c2 = HeadingContainer;\nconst HeadingBackground = styled(Card)`\n    height: auto;\n    width: 100%;\n    padding: 20px;\n    background-color: #1D1E20;\n    box-shadow: 0px 3px 15px rgba(0,0,0,0.2);\n`;\n_c3 = HeadingBackground;\nconst BigHeading = styled.h1`\n    font-size: 280%;\n    font-weight: 800;\n    color:  #fbdb37;\n    \n`;\n_c4 = BigHeading;\nconst LittleHeading = styled.h2`\n    font-size: 200%;\n    font-weight: 600;\n    color: #fbfbfb;\n    \n`;\n_c5 = LittleHeading;\n\nconst Pools = () => {\n  _s();\n\n  const {\n    active,\n    account,\n    library,\n    connector\n  } = useWeb3React();\n  const [poolData, setPoolData] = useState(pools); //imported above\n\n  const [masterChefContract, setMasterChefContract] = useState();\n  const [poolBalance, setPoolBalance] = useState('0');\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [allowances, setAllowances] = useState('false');\n  const [balances, setBalances] = useState('');\n  useEffect(() => {\n    if (active) {\n      const master = writeContract(active, library.getSigner(), account, addresses.masterChef, MasterChefABI).then(val => {\n        setMasterChefContract(val);\n        console.log(val);\n      });\n    } else {\n      console.log(\"no masterchef\");\n      const noData = setMasterChefContract(null);\n    }\n  }, [active]);\n  useEffect(async () => {\n    if (library && account) {\n      const farmData = await fetchUserPoolData(masterChefContract, library, account, 4);\n      const userFarmData = await mapPendingToOriginalData(farmData, pools, masterChefContract, 4);\n      const alounces = await fetchPoolAllowance(userFarmData, library.getSigner(), account, masterChefContract);\n      const bal = await fetchTokenStakeBalance(userFarmData, library.getSigner());\n      setBalances(bal);\n      setPoolData(userFarmData);\n      setAllowances(alounces);\n    } else {\n      console.log(\"stillbroke no pooldata\");\n      setPoolData(pools);\n      setAllowances(\"false\");\n      setBalances('');\n    }\n  }, [masterChefContract, fastRefresh]);\n  useEffect(async () => {\n    try {\n      console.log(`This is poolData inside function ${poolData}`);\n      console.log(poolData);\n      const poolbal = await getPoolBalance(poolData, active, library.getSigner(), account, ERC20Abi, masterChefContract, 4);\n      setPoolBalance(poolbal);\n      console.log(poolbal);\n    } catch (err) {\n      console.log(err);\n    }\n  }, [poolData, active, library]); //if we do have pooldata then go ahead and populate a card for each pool\n\n  if (masterChefContract !== null && active) {\n    const mapPoolData = poolData.map((pool, index) => /*#__PURE__*/_jsxDEV(PoolCard, {\n      balance: balances[index],\n      allowance: allowances[index],\n      masterChef: masterChefContract,\n      signer: library.getSigner(),\n      pid: index,\n      poolBalance: poolBalance[index],\n      pool: pool\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(HeadingContainer, {\n        children: /*#__PURE__*/_jsxDEV(HeadingBackground, {\n          children: [/*#__PURE__*/_jsxDEV(BigHeading, {\n            children: \"Staking Pools\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LittleHeading, {\n            children: \"Stake Assets to Earn COB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PoolGrid, {\n        children: mapPoolData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  } //if we dont have pool data then return static dummy\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(HeadingContainer, {\n        children: /*#__PURE__*/_jsxDEV(HeadingBackground, {\n          children: [/*#__PURE__*/_jsxDEV(BigHeading, {\n            children: \"Staking Pools\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(LittleHeading, {\n            children: \"Stake Assets to Earn COB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PoolGrid, {\n        children: [/*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(PoolCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Pools, \"A3uBlhdI213HPDePPBW6DmTJbW0=\", false, function () {\n  return [useWeb3React, useRefresh];\n});\n\n_c6 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"PoolGrid\");\n$RefreshReg$(_c2, \"HeadingContainer\");\n$RefreshReg$(_c3, \"HeadingBackground\");\n$RefreshReg$(_c4, \"BigHeading\");\n$RefreshReg$(_c5, \"LittleHeading\");\n$RefreshReg$(_c6, \"Pools\");","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/pages/pools/index.js"],"names":["styled","axios","ethers","React","useEffect","useState","useWeb3React","addresses","pools","MasterChefABI","ERC20Abi","writeContract","fetchPoolAllowance","getTokenStakeBalance","fetchTokenStakeBalance","fetchUserPoolData","mapPendingToOriginalData","getPoolBalance","Page","Container","Card","Button","PoolCard","useRefresh","PoolGrid","HeadingContainer","HeadingBackground","BigHeading","h1","LittleHeading","h2","Pools","active","account","library","connector","poolData","setPoolData","masterChefContract","setMasterChefContract","poolBalance","setPoolBalance","fastRefresh","allowances","setAllowances","balances","setBalances","master","getSigner","masterChef","then","val","console","log","noData","farmData","userFarmData","alounces","bal","poolbal","err","mapPoolData","map","pool","index"],"mappings":"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","sourcesContent":["\nimport styled from \"styled-components\";\nimport axios from \"axios\"\nimport {ethers} from \"ethers\";\nimport React, {useEffect, useState} from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n//static confg\nimport { addresses } from \"../../config/addresses\";\nimport {pools} from \"../../config/pools\";\nimport {MasterChefABI, ERC20Abi} from \"../../config/abis\";\nimport {writeContract, fetchPoolAllowance, getTokenStakeBalance, fetchTokenStakeBalance} from \"../../utils/nft\";\nimport {fetchUserPoolData, mapPendingToOriginalData, getPoolBalance} from \"../../utils/fetchUserData\";\n//Components\nimport {Page} from \"../../components/Page\"\nimport {Container, Card, Button} from \"react-bootstrap\";\nimport PoolCard from \"./components/PoolCard\";\n\n//hooks\nimport {useRefresh} from \"../../utils/useRefresh\";\n\n\n\n\nconst PoolGrid = styled(Container)`\n    margin-top: 25px;\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-template-rows: auto;\n    justify-items: center;\n    align-content: start;\n    column-gap: 2px;\n    row-gap: 20px;\n    margin-bottom: 25px;\n\n    @media (max-width: 768px) {\n        flex-direction: column;\n        grid-template-columns: auto;\n        grid-template-rows: auto;\n      }\n  \n`\n\nconst HeadingContainer = styled(Container)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    margin-top: 15px;\n`\n\nconst HeadingBackground = styled(Card)`\n    height: auto;\n    width: 100%;\n    padding: 20px;\n    background-color: #1D1E20;\n    box-shadow: 0px 3px 15px rgba(0,0,0,0.2);\n`\n\nconst BigHeading = styled.h1`\n    font-size: 280%;\n    font-weight: 800;\n    color:  #fbdb37;\n    \n`\nconst LittleHeading = styled.h2`\n    font-size: 200%;\n    font-weight: 600;\n    color: #fbfbfb;\n    \n`\n\n\nconst Pools = () => {\n   \n    const {active, account, library, connector} = useWeb3React();\n    const [poolData, setPoolData] = useState(pools); //imported above\n    const [masterChefContract, setMasterChefContract] = useState()\n    const [poolBalance, setPoolBalance] = useState('0')\n    const { fastRefresh } = useRefresh()\n    const [allowances, setAllowances] = useState('false')\n    const [balances, setBalances] = useState('')\n    \n    \n    useEffect( () => {\n        if (active) {\n          const master = writeContract(\n              active, \n              library.getSigner(), \n              account,\n              addresses.masterChef,\n              MasterChefABI,\n              ).then(val => {\n                setMasterChefContract(val)\n                console.log(val)\n              })\n        } else {\n            console.log(\"no masterchef\")\n          const noData = setMasterChefContract(null)\n        }\n        \n        \n      }, [active])\n\n    useEffect( async () => {\n     \n            \n            if (library && account) {\n            \n                const farmData = await fetchUserPoolData(masterChefContract, library, account, 4)\n                const userFarmData = await mapPendingToOriginalData(farmData, pools, masterChefContract, 4)\n                const alounces = await fetchPoolAllowance(userFarmData, library.getSigner(), account, masterChefContract)\n                const bal = await fetchTokenStakeBalance(userFarmData, library.getSigner())\n                setBalances(bal)\n                setPoolData(userFarmData)\n                setAllowances(alounces)\n            } else {\n                console.log(\"stillbroke no pooldata\")\n                setPoolData(pools)\n                setAllowances(\"false\")\n                setBalances('')\n            }\n    \n              \n       }, [masterChefContract, fastRefresh])\n\n    useEffect( async () => {\n\n        try {\n            console.log(`This is poolData inside function ${poolData}`)\n            console.log(poolData)\n            const poolbal = await getPoolBalance(poolData, active, library.getSigner(), account, ERC20Abi, masterChefContract, 4)\n            setPoolBalance(poolbal)\n            console.log(poolbal)          \n    \n\n        } catch (err) {\n            console.log(err)\n        }\n    }, [poolData, active, library])\n\n    //if we do have pooldata then go ahead and populate a card for each pool\n    if (masterChefContract !== null && active) {\n        const mapPoolData =  poolData.map((pool, index) => (\n\n            <PoolCard balance={balances[index]} allowance={allowances[index]} masterChef={masterChefContract} signer={library.getSigner()} pid={index} poolBalance={poolBalance[index]} pool={pool}/>\n            \n        ));\n\n        return (\n            <>\n            <HeadingContainer>\n                <HeadingBackground>\n                    <BigHeading>Staking Pools</BigHeading>\n                    <LittleHeading>Stake Assets to Earn COB</LittleHeading>\n                </HeadingBackground>\n            </HeadingContainer>\n            <PoolGrid>\n                {mapPoolData}\n            </PoolGrid>\n            \n            \n    \n            </>\n        )\n    }\n   \n    //if we dont have pool data then return static dummy\n    return (\n        <>\n        <Page>\n\n            <HeadingContainer>\n                <HeadingBackground>\n                    <BigHeading>Staking Pools</BigHeading>\n                    <LittleHeading>Stake Assets to Earn COB</LittleHeading>\n                </HeadingBackground>\n            </HeadingContainer>\n\n            <PoolGrid>\n\n                <PoolCard/>\n                <PoolCard/>\n                <PoolCard/>\n                \n            \n            </PoolGrid>\n            \n\n        </Page>\n\n        </>\n    )\n}\n\nexport default Pools"]},"metadata":{},"sourceType":"module"}