{"ast":null,"code":"import React from \"react\";\nimport { ethers } from \"ethers\";\nexport const getUserFarmData = async (signer, masterchefContract, pLength, poolInfo) => {\n  const accountAddress = await signer.getAddress();\n  console.log(pLength);\n  const userPoolDataPromises = [];\n\n  for (let pid = 0; pid < pLength; pid++) {\n    const poolData = masterchefContract.pendingCob(pid, accountAddress);\n    userPoolDataPromises.push(poolData);\n  }\n\n  ;\n  const Returns = Promise.all(userPoolDataPromises).then(values => {\n    const dataPack = values.map((value, index) => {\n      const pending = ethers.utils.formatUnits(value, \"ether\");\n      const pool = poolInfo[index];\n      const lpToken = pool.lpToken;\n      const allocationPoints = pool.allocPoint;\n      const accCobPerShare = pool.accCobPerShare;\n      const depositFee = pool.depositFeeBP;\n      return {\n        pendingReward: pending,\n        poolInformation: {\n          depositTokenAddress: lpToken,\n          allocation: allocationPoints,\n          rewardPerShare: accCobPerShare,\n          fee: depositFee\n        }\n      };\n    });\n    console.log(typeof dataPack);\n  });\n  return Returns;\n};\nexport const getPoolLength = async _masterchef => {\n  _masterchef.poolLength().then(res => {\n    return res;\n  });\n};\nexport const mapPendingToOriginalData = async (newData, oldData, _masterchef, poolLength) => {\n  const staticPoolLength = oldData.length;\n\n  if (poolLength == staticPoolLength) {\n    const recycledData = newData.map(value => {\n      const pending = value.pendingReward;\n      return {\n        pendingCob: pending,\n        ...oldData\n      };\n    });\n    console.log(\"recycled\");\n    console.log(recycledData);\n    return recycledData;\n  } else {\n    console.log(`Devie needs to update static pool folder.  Your fetched pool length is ${poolLength} but your static pool length is ${staticPoolLength}`);\n    return oldData;\n  }\n};","map":{"version":3,"sources":["/Users/nolanterry/Desktop/CORNLIMITFRONTEND/cornfrontend/src/utils/fetchUserData.js"],"names":["React","ethers","getUserFarmData","signer","masterchefContract","pLength","poolInfo","accountAddress","getAddress","console","log","userPoolDataPromises","pid","poolData","pendingCob","push","Returns","Promise","all","then","values","dataPack","map","value","index","pending","utils","formatUnits","pool","lpToken","allocationPoints","allocPoint","accCobPerShare","depositFee","depositFeeBP","pendingReward","poolInformation","depositTokenAddress","allocation","rewardPerShare","fee","getPoolLength","_masterchef","poolLength","res","mapPendingToOriginalData","newData","oldData","staticPoolLength","length","recycledData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAOC,MAAP,EAAeC,kBAAf,EAAmCC,OAAnC,EAA4CC,QAA5C,KAAyD;AAGpF,QAAMC,cAAc,GAAG,MAAMJ,MAAM,CAACK,UAAP,EAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEA,QAAMM,oBAAoB,GAAG,EAA7B;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGP,OAAxB,EAAiCO,GAAG,EAApC,EAAwC;AACpC,UAAMC,QAAQ,GAAGT,kBAAkB,CAACU,UAAnB,CAA8BF,GAA9B,EAAmCL,cAAnC,CAAjB;AACAI,IAAAA,oBAAoB,CAACI,IAArB,CAA0BF,QAA1B;AACH;;AAAA;AACD,QAAMG,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYP,oBAAZ,EACfQ,IADe,CACVC,MAAM,IAAI;AACZ,UAAMC,QAAQ,GAAGD,MAAM,CAACE,GAAP,CAAW,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAE1C,YAAMC,OAAO,GAAGxB,MAAM,CAACyB,KAAP,CAAaC,WAAb,CAAyBJ,KAAzB,EAAgC,OAAhC,CAAhB;AAEA,YAAMK,IAAI,GAAGtB,QAAQ,CAACkB,KAAD,CAArB;AACA,YAAMK,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,YAAMC,gBAAgB,GAAGF,IAAI,CAACG,UAA9B;AACA,YAAMC,cAAc,GAAGJ,IAAI,CAACI,cAA5B;AACA,YAAMC,UAAU,GAAGL,IAAI,CAACM,YAAxB;AAKA,aAAO;AACHC,QAAAA,aAAa,EAAEV,OADZ;AAEHW,QAAAA,eAAe,EAAE;AACbC,UAAAA,mBAAmB,EAAER,OADR;AAEbS,UAAAA,UAAU,EAAER,gBAFC;AAGbS,UAAAA,cAAc,EAAEP,cAHH;AAIbQ,UAAAA,GAAG,EAAEP;AAJQ;AAFd,OAAP;AAQH,KArBgB,CAAjB;AAsBAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOW,QAAnB;AACH,GAzBe,CAAhB;AA0BA,SAAOL,OAAP;AAEH,CAvCM;AAyCP,OAAO,MAAMyB,aAAa,GAAG,MAAOC,WAAP,IAAuB;AAChDA,EAAAA,WAAW,CAACC,UAAZ,GAAyBxB,IAAzB,CAA+ByB,GAAG,IAAI;AAClC,WAAOA,GAAP;AACH,GAFD;AAGH,CAJM;AAMP,OAAO,MAAMC,wBAAwB,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,EAAyBL,WAAzB,EAAsCC,UAAtC,KAAqD;AAEzF,QAAMK,gBAAgB,GAAGD,OAAO,CAACE,MAAjC;;AACA,MAAIN,UAAU,IAAIK,gBAAlB,EAAoC;AAEhC,UAAME,YAAY,GAAGJ,OAAO,CAACxB,GAAR,CAAaC,KAAD,IAAW;AACxC,YAAME,OAAO,GAAGF,KAAK,CAACY,aAAtB;AACA,aAAO;AACHrB,QAAAA,UAAU,EAAEW,OADT;AAEH,WAAGsB;AAFA,OAAP;AAIH,KANoB,CAArB;AAOAtC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYwC,YAAZ;AACA,WAAOA,YAAP;AAGH,GAdD,MAcO;AAEHzC,IAAAA,OAAO,CAACC,GAAR,CAAa,0EAAyEiC,UAAW,mCAAkCK,gBAAiB,EAApJ;AACA,WAAOD,OAAP;AAEH;AAGJ,CAzBM","sourcesContent":["import React from \"react\";\nimport {ethers} from \"ethers\";\n\nexport const getUserFarmData = async (signer, masterchefContract, pLength, poolInfo) => {\n\n\n    const accountAddress = await signer.getAddress();\n    console.log(pLength)\n\n    const userPoolDataPromises = [];\n    for (let pid = 0; pid < pLength; pid++) {\n        const poolData = masterchefContract.pendingCob(pid, accountAddress);\n        userPoolDataPromises.push(poolData);\n    };\n    const Returns = Promise.all(userPoolDataPromises)\n    .then(values => {\n        const dataPack = values.map((value, index) => {\n\n            const pending = ethers.utils.formatUnits(value, \"ether\");\n\n            const pool = poolInfo[index];\n            const lpToken = pool.lpToken;\n            const allocationPoints = pool.allocPoint;\n            const accCobPerShare = pool.accCobPerShare;\n            const depositFee = pool.depositFeeBP;\n\n            \n            \n\n            return {\n                pendingReward: pending, \n                poolInformation: {\n                    depositTokenAddress: lpToken,\n                    allocation: allocationPoints,\n                    rewardPerShare: accCobPerShare,\n                    fee: depositFee\n                }};\n        })\n        console.log(typeof(dataPack))\n    })\n    return Returns\n\n}\n\nexport const getPoolLength = async (_masterchef) => {\n    _masterchef.poolLength().then( res => {\n        return res\n    }); \n}\n\nexport const mapPendingToOriginalData = async (newData, oldData, _masterchef, poolLength) => {\n    \n    const staticPoolLength = oldData.length;\n    if (poolLength == staticPoolLength) {\n\n        const recycledData = newData.map((value) => {\n            const pending = value.pendingReward;\n            return {\n                pendingCob: pending,\n                ...oldData\n            };\n        });\n        console.log(\"recycled\")\n        console.log(recycledData)\n        return recycledData;\n\n\n    } else {\n\n        console.log(`Devie needs to update static pool folder.  Your fetched pool length is ${poolLength} but your static pool length is ${staticPoolLength}`);\n        return oldData;\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}